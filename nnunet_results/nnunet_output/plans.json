import numpy as np
import matplotlib.pyplot as plt
from scipy.io import wavfile

# Load the file
def load_audio(Sample.wav):
    sample_rate, data = wavfile.read(Sample.wav)
    if data.ndim > 1: 
        data = data[
    : ,
    0
]
    return sample_rate, data

# Fourier Transform
def perform_fft(data):
    fft_values = np.fft.fft(data) 
    magnitude = np.abs(fft_values) 
    phase = np.angle(fft_values)  
    return fft_values, magnitude, phase

def modify_spectrum(fft_values, magnitude, factor=0.5):
    modified_magnitude = magnitude * factor
    modified_fft_values = modified_magnitude * np.exp(1j * np.angle(fft_values))
    return modified_fft_values

# Inverse Fourier Transform
def inverse_fft(modified_fft_values):
    new_signal = np.fft.ifft(modified_fft_values).real  
    return new_signal

def save_audio(filename, sample_rate, data):
    wavfile.write(filename, sample_rate, (data * 32767).astype(np.int16))

def plot_waveform(t, signal, title="Waveform"):
    plt.figure(figsize=(12,
6))
    plt.plot(t, signal)
    plt.title(title)
    plt.xlabel("Time (s)")
    plt.ylabel("Amplitude")
    plt.grid()
    plt.show()

if __name__ == "__main__":
    filename = "Sample.wav"
    
    # Load and execute FFT
    sample_rate, data = load_audio(Sample.wav)
    fft_values, magnitude, phase = perform_fft(data)
    
    modified_fft_values = modify_spectrum(fft_values, magnitude, factor=0.8)
    
    new_signal = inverse_fft(modified_fft_values)
    
    t = np.linspace(0, len(data) / sample_rate, len(data), endpoint=False)
    plot_waveform(t, new_signal, title="Modified Waveform")
    
    output_filename = "modified_synthesized.wav"
    save_audio(output_filename, sample_rate, new_signal)
    print(f"Synthesized audio saved to {output_filename}")
